{"version":3,"sources":["webpack:///./src/components/heading.js","webpack:///./src/utils/classNames.js","webpack:///./src/components/loadingModal.js","webpack:///./src/components/demo/usePyodide.js","webpack:///./src/components/demo/index.js"],"names":["Heading","title","subtitle","className","SubHeading","outline","classNames","classes","filter","Boolean","join","LoadingModal","loading","message","useState","open","setOpen","useEffect","setTimeout","show","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","fill","viewBox","fillRule","d","clipRule","stroke","strokeLinecap","strokeLinejoin","strokeWidth","usePyodide","callback","pyodide","setPyodide","setLoading","script","document","createElement","innerHTML","body","appendChild","window","pyodideWorker","onmessage","event","results","data","postMessage","method","removeChild","runPython","code","loadPackages","packages","getPythonGlobal","name","attachGlobal","reload","posToColor","Token","token","index","send","selectedIndex","updateState","forceUpdate","useCallback","bgColor","setBgColor","key","onClick","pos","text","TextBox","textInput","setTextInput","sendTextInput","id","placeholder","onChange","target","value","onKeyDown","Demo","parsing","setParsing","parsed","length","parsedOutput","useReducer","state","parse","includes","push","parses","addParse","setSelectedIndex","newSelectedIndex","selectedToken","split","content","reverse","map","i","j","decl","lemma","gloss","entry"],"mappings":"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","file":"9-0f1c9fea5a2f1403dea5.js","sourcesContent":["import React from \"react\"\n\nconst Heading = ({ title, subtitle = \"\" }) => {\n\n  return (\n    <div className=\"pt-12 sm:pt-16 lg:pt-24\">\n        <div className=\"max-w-screen-xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n            <div className=\"mx-auto lg:max-w-none\">\n                <p className=\"mt-2 text-3xl leading-9 font-extrabold text-white sm:text-4xl sm:leading-10 lg:text-5xl lg:leading-none\">\n                    {title}\n                </p>\n                <p className=\"mt-2 text-xl leading-7 text-gray-300\">\n                    {subtitle}\n                </p>\n            </div>\n        </div>\n    </div>\n  )\n}\n\nconst SubHeading = ({ title, outline = \"center\" }) => {\n    return (\n        <div className=\"flex items-center pb-2\">\n            {outline !== \"left\" ? (\n                <div className=\"flex-1 border-t-2 border-gray-200 mr-3\"></div>\n            ) : (\n                <></>\n            )}\n            <h4 className=\"flex-shrink-0 bg-white text-sm leading-5 tracking-wider font-semibold uppercase text-gray-800\">\n                {title}\n            </h4>\n            {outline !== \"right\" ? (\n                <div className=\"flex-1 border-t-2 border-gray-200 ml-3\"></div>\n            ) : (\n                <></>\n            )}\n        </div>\n    )\n}\n\nexport {\n    Heading,\n    SubHeading\n}","export default function classNames(...classes) {\n  return classes.filter(Boolean).join(\" \")\n}\n","import React, { useEffect, useState } from \"react\"\nimport classNames from \"../utils/classNames\"\nimport Transition from \"./transition\"\n\nconst MODAL_DISMISS_TIMEOUT = 1600\n\nexport const LoadingModal = ({ loading, message }) => {\n  const [open, setOpen] = useState(true)\n\n  useEffect(() => {\n    if (!loading) setTimeout(setOpen, MODAL_DISMISS_TIMEOUT, false)\n  }, [loading])\n\n  return (\n    <div\n      className={classNames(\n        \"fixed bottom-0 inset-x-0 px-4 pb-6 sm:inset-0 sm:p-0 sm:flex sm:items-center sm:justify-center z-10\",\n        !open && \"pointer-events-none\"\n      )}\n    >\n      <Transition\n        show={open}\n        enter=\"ease-out duration-300\"\n        enterFrom=\"opacity-0\"\n        enterTo=\"opacity-100\"\n        leave=\"ease-in duration-200\"\n        leaveFrom=\"opacity-100\"\n        leaveTo=\"opacity-0\"\n      >\n        <div className=\"fixed inset-0 transition-opacity\">\n          <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\n        </div>\n      </Transition>\n\n      <Transition\n        show={open}\n        enter=\"ease-out duration-300\"\n        enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\n        leave=\"ease-in duration-200\"\n        leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\n        leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n      >\n        <div className=\"bg-white rounded-lg px-4 pt-5 pb-4 overflow-hidden shadow-xl transform transition-all sm:max-w-sm sm:w-full sm:p-6\">\n          <div>\n            <div\n              className={classNames(\n                \"mx-auto flex items-center justify-center h-12 w-12 rounded-full\",\n                loading ? \"bg-red-100\" : \"bg-green-100\"\n              )}\n            >\n              {loading ? (\n                <svg\n                  fill=\"currentColor\"\n                  className=\"h-6 w-6 text-red-600\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\"\n                    clipRule=\"evenodd\"\n                  ></path>\n                </svg>\n              ) : (\n                <svg\n                  className=\"h-6 w-6 text-green-600\"\n                  stroke=\"currentColor\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    d=\"M5 13l4 4L19 7\"\n                  />\n                </svg>\n              )}\n            </div>\n            <div className=\"mt-3 text-center sm:mt-5\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                {loading ? \"Loading...\" : \"Complete!\"}\n              </h3>\n              <p className=\"mt-4\">{message}</p>\n              <p className=\"mt-4\">Can take up to one minute...</p>\n            </div>\n          </div>\n        </div>\n      </Transition>\n    </div>\n  )\n}\n\nexport default LoadingModal\n","import { useEffect, useState } from \"react\"\n\nconst usePyodide = callback => {\n  const [pyodide, setPyodide] = useState()\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const script = document.createElement(\"script\")\n    script.innerHTML = `self.pyodideWorker = new Worker('/pyodideWorker.js')`\n    document.body.appendChild(script)\n\n    window.pyodideWorker.onmessage = event => {\n      const results = event.data\n      if (loading) setLoading(false)\n      callback(results)\n    }\n\n    window.pyodideWorker.postMessage({\n      method: \"runPython\",\n      data: \"True\",\n    })\n\n    setPyodide(window.pyodideWorker)\n\n    return () => {\n      document.body.removeChild(script)\n    }\n  }, [])\n\n  const runPython = code => {\n    if (pyodide)\n      pyodide.postMessage({\n        method: \"runPython\",\n        data: code,\n      })\n  }\n\n  const loadPackages = packages => {\n    if (pyodide)\n      pyodide.postMessage({\n        method: \"loadPackages\",\n        data: packages,\n      })\n  }\n\n  const getPythonGlobal = name => {\n    if (pyodide)\n      pyodide.postMessage({\n        method: \"pyimport\",\n        data: name,\n      })\n  }\n\n  const attachGlobal = data => {\n    if (pyodide)\n      pyodide.postMessage({\n        method: \"attachGlobal\",\n        data,\n      })\n  }\n\n  const reload = data => {\n    if (pyodide)\n      pyodide.postMessage({\n        method: \"reload\",\n        data,\n      })\n  }\n\n  return {\n    loading,\n    pyodide,\n    runPython,\n    loadPackages,\n    getPythonGlobal,\n    attachGlobal,\n    reload,\n  }\n}\n\nexport default usePyodide\n","import React, {\n  useCallback,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\"\nimport LoadingModal from \"../loadingModal\"\nimport {Heading, SubHeading} from \"../heading\"\nimport \"./index.css\"\nimport usePyodide from \"./usePyodide\"\nimport classNames from \"../../utils/classNames\"\n\nconst posToColor = {\n  \"verb\": \"red\",\n  \"noun\": \"blue\",\n  \"adj\": \"green\"\n}\n\nconst Token = ({token, index, send, selectedIndex}) => {\n  const [, updateState] = useState()\n  const forceUpdate = useCallback(() => updateState({}), [])\n\n  const [bgColor, setBgColor] = useState(\"\")\n\n  const tokenClick = () => {\n    setBgColor(posToColor[token.pos])\n    send(token, index)\n    forceUpdate()\n  }\n\n  return (\n    <span key={\"wrap\" + index}>\n      <span\n        key={index}\n        className={classNames(\n          \"cursor-pointer\",\n          selectedIndex === index\n            ? \"rounded-lg bg-\" + bgColor + \"-300 p-1 pl-2 pr-2\"\n            : \"\"\n        )}\n        onClick={tokenClick}\n      >\n        {token.text}\n      </span>\n      {\" \"}\n    </span>\n  )\n\n}\n\nconst TextBox = ({send}) => {\n  const [textInput, setTextInput] = useState(\"\")\n\n  const sendTextInput = () => {\n    send(textInput)\n    setTextInput(\"\")\n  }\n\n  return (\n    <div className=\"bg-white px-6 py-8 lg:flex-shrink-1 lg:p-12\">\n      <div className=\"mt-1 flex rounded-md shadow-sm\">\n        <div className=\"relative flex-grow focus-within:z-10\">\n          <input\n            id=\"text_input\"\n            className=\"form-input block w-full h-full rounded-none rounded-l-md border border-gray-300 pl-3 transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\n            placeholder=\"Enter Latin text...\"\n            onChange={event => setTextInput(event.target.value)}\n            value={textInput}\n            onKeyDown={event => event.key === \"Enter\" && sendTextInput()}\n          />\n        </div>\n        <button\n          className=\"-ml-px relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm leading-5 font-medium rounded-r-md text-gray-700 bg-gray-50 hover:text-gray-500 hover:bg-white focus:outline-none focus:shadow-outline-blue focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150\"\n          onClick={sendTextInput}\n        >\n          <svg\n            className=\"h-5 w-5 text-gray-400\"\n            viewBox=\"0 0 20 20\"\n            fill=\"currentColor\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n              clipRule=\"evenodd\"\n            ></path>\n          </svg>\n          <span className=\"ml-2\">Parse</span>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nconst Demo = () => {\n  const [, updateState] = useState()\n  const forceUpdate = useCallback(() => updateState({}), [])\n\n  const [parsing, setParsing] = useState(false)\n\n  const callback = parsed => {\n    setParsing(false)\n    if (parsed?.length > 0) {\n      parsedOutput(parsed)\n    }\n  }\n\n  const { loading, attachGlobal, runPython, reload } = usePyodide(callback)\n\n  const [parses, addParse] = useReducer((state, parse) => {\n    if (parse && state && !state.includes(parse)) {\n      state.push(parse)\n      return state\n    }\n    return state\n  }, [])\n\n  const [selectedIndex, setSelectedIndex] = useState(\"\")\n  const newSelectedIndex = (token, index) => {\n    setSelectedIndex(index)\n    forceUpdate()\n  }\n\n  const newUserInput = content => {\n    setParsing(true)\n    runPython(`parse(\"${content}\")`)\n  }\n\n  const parsedOutput = parsed => {\n    addParse(parsed)\n    forceUpdate()\n  }\n\n  const reloadGlobals = () => {\n    attachGlobal({})\n    runPython(`from js import demo`)\n    runPython(`exec(demo)`)\n  }\n\n  var selectedToken = (\n    selectedIndex !== \"\"\n    ? parses[selectedIndex.split(\",\")[0]][selectedIndex.split(\",\")[1]]\n    : \"\"\n  )\n\n  useEffect(() => {\n    if (!loading) reloadGlobals()\n  }, [loading])\n\n  return (\n    <>\n      <div className=\"bg-gray-900\">\n        <Heading title=\"Nota Bene Demo\" />\n        <div className=\"mt-8 pb-12 bg-white sm:mt-12 sm:pb-16 lg:pb-24\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 h-32 bg-gray-900\"></div>\n            <div className=\"relative max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8\">\n              <div className=\"mx-auto rounded-lg shadow-lg overflow-hidden lg:max-w-none\">\n                <div className=\"bg-white px-6 py-8 lg:flex-shrink-1 lg:p-12\">\n                  <TextBox send={newUserInput} />\n                  <div className=\"mb-6\">\n                    {parses.length === 0 && !parsing ? (\n                      <div className=\"text-gray-500 text-center text-sm\">\n                        Enter Latin text to get started ↑\n                      </div>\n                    ) : (\n                      <div className=\"grid grid-cols-2\">{/* className=\"flex justify-evenly\"> */}\n                        <div>\n                          {parsing ? (\n                            <div className=\"rounded-lg bg-white shadow-lg border border-gray-400 p-2 m-4 my-4 text-left\">\n                              <div className=\"animate-pulse flex space-x-4\">\n                                <div className=\"flex-1 space-y-4 py-1\">\n                                  <div className=\"h-4 bg-blue-400 rounded w-5/6\"></div>\n                                  <div className=\"h-4 bg-blue-400 rounded\"></div>\n                                  <div className=\"h-4 bg-blue-400 rounded w-3/4\"></div>\n                                </div>\n                              </div>\n                            </div>\n                          ) : (\n                            <></>\n                          )}\n                          {[...parses].reverse().map((parse, i) => (\n                            <div\n                              className=\"rounded-lg bg-white shadow-lg border border-gray-400 p-2 m-4 my-4 text-left\"\n                              key={i}\n                            >\n                            {parse.map((token, j) => (\n                              <Token token={token} key={j} index={(parses.length - i - 1) + \",\" + j} send={newSelectedIndex} selectedIndex={selectedIndex} />\n                            ))}\n                            </div>\n                          ))}\n                        </div>\n                        <div>\n                          <div className=\"rounded-lg bg-white shadow-lg border border-gray-400 p-2 m-4 my-4 text-left\">\n                            <SubHeading title=\"Word information\" />\n                            {selectedToken !== \"\" ? (\n                              <div>\n                                <div className=\"flex justify-between flex-initial\">\n                                  <p className=\"rounded-lg p-1 pl-2 pr-2\">{selectedToken.text}</p>\n                                  <p\n                                    className={classNames(\n                                      \"rounded-lg p-1 pl-2 pr-2 bg-\" + posToColor[selectedToken.pos] + \"-300\"\n                                    )}\n                                  >\n                                    {selectedToken.pos}\n                                  </p>\n                                </div>\n                                <div className=\"pt-2 pb-4\">\n                                  {selectedToken.decl} of <i>{selectedToken.lemma}</i>\n                                </div>\n                                <SubHeading title=\"Glossary\" />\n                                <p className=\"rounded-lg p-1 pl-2 pr-2\"><i>{selectedToken.lemma}</i></p>\n                                <ol className=\"list-decimal pl-5\">\n                                  {selectedToken.gloss.map((entry, i) => (\n                                    <li key={i}>{entry}</li>\n                                  ))}\n                                </ol>\n                                {/* <SubHeading title=\"Translation\" /> */}\n                              </div>\n                            ) : (\n                              <p><i>Click on a word to display its lexical and morphological information.</i></p>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <LoadingModal\n        loading={loading}\n        message={\"This demo requires a modern browser.\"}\n      />\n    </>\n  )\n}\n\nexport default Demo\n"],"sourceRoot":""}